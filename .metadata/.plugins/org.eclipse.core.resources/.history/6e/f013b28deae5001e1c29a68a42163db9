package com.security.configuration;


import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

import jakarta.servlet.FilterChain;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity(prePostEnabled = true)
public class SecurityConfig {

//	@Bean
//	public UserDetailsService UserDetailsService() {
//		UserDetails admin = User.withUsername("Nejam")
//								  .password(passwordEncoder().encode("pwd1"))
//								  .roles("ADMIN")
//								  .build();
//		
//		UserDetails user = User.withUsername("Yousuf")
//								  .password(passwordEncoder().encode("pwd1"))
//								  .roles("USER")
//								  .build();
//		
//		
//		return new InMemoryUserDetailsManager(admin,user);
//	}
	
	@Bean
	public UserDetailsService userDetailsService() {
		return new UserInfoUserDetailsService();
	}
	
	@Bean
	 public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		
	        return http.csrf().disable()
	                .authorizeHttpRequests()
	                .requestMatchers("/home").permitAll()
	                .requestMatchers("/add").permitAll()
	                .and()
	                .authorizeHttpRequests().requestMatchers("products/**")
	                .authenticated().and(). httpBasic().and().build();
	    }
	
	
	
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
		
	}

	
	
}
